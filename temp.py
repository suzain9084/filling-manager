# from backend.gemini_api import GeminiAPI
# import ast

data = {'level': [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 3, 4, 5, 5, 5, 5, 2, 3, 4, 5, 5, 5, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 5, 5, 5, 5, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 4, 5, 5, 5, 5, 5, 4, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 4, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5], 'page_num': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'block_num': [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19], 'par_num': [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], 'line_num': [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1], 'word_num': [0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 1, 2, 3, 4, 0, 0, 0, 1, 2, 3, 4, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 2, 3, 4, 5, 0, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], 'left': [0, 405, 405, 405, 405, 457, 549, 666, 813, 875, 1007, 1068, 1169, 643, 643, 643, 643, 730, 793, 967, 301, 301, 301, 301, 353, 445, 623, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 302, 302, 302, 302, 405, 489, 1102, 1139, 775, 775, 302, 302, 432, 493, 586, 647, 783, 825, 1069, 1106, 787, 787, 321, 321, 361, 745, 1258, 1321, 359, 359, 452, 567, 355, 355, 452, 566, 608, 356, 356, 453, 564, 606, 355, 355, 453, 551, 632, 674, 762, 814, 356, 356, 453, 523, 565, 663, 703, 356, 356, 454, 356, 356, 453, 530, 660, 752, 869, 935, 974, 1030, 453, 453, 495, 585, 681, 761, 936, 356, 356, 452, 683, 760, 796, 882, 922, 1047, 1132, 1174, 298, 298, 298, 298, 435, 435, 435, 435, 453, 453, 453, 453, 1235, 1235, 1235, 1235, 301, 301, 301, 301, 1397, 1397, 1397, 1397], 'top': [0, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 344, 344, 344, 344, 344, 344, 344, 444, 444, 444, 444, 444, 444, 444, 912, 912, 912, 912, 1014, 1014, 1014, 1014, 1116, 1116, 1116, 1116, 1217, 1217, 1217, 1217, 1319, 1319, 1319, 1319, 1421, 1421, 1421, 1421, 1523, 1523, 1523, 1523, 1625, 1625, 1625, 1625, 1793, 1793, 1793, 1793, 544, 544, 544, 544, 544, 544, 539, 544, 645, 645, 745, 745, 745, 745, 745, 745, 745, 745, 740, 745, 834, 834, 954, 958, 958, 954, 958, 958, 1060, 1061, 1061, 1060, 1161, 1162, 1161, 1161, 1161, 1263, 1264, 1264, 1263, 1263, 1365, 1366, 1366, 1366, 1365, 1365, 1366, 1366, 1466, 1467, 1466, 1466, 1467, 1467, 1467, 1569, 1570, 1569, 1670, 1671, 1670, 1670, 1670, 1670, 1671, 1670, 1670, 1670, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1839, 1840, 1840, 1840, 1840, 1848, 1839, 1839, 1839, 1839, 1839, 914, 914, 914, 914, 914, 914, 914, 914, 1906, 1906, 1906, 1906, 914, 914, 914, 914, 1962, 1962, 1962, 1962, 914, 914, 914, 914], 'width': [1700, 887, 887, 887, 41, 80, 104, 135, 52, 123, 50, 90, 123, 410, 410, 410, 74, 50, 65, 86, 384, 384, 384, 41, 79, 166, 62, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1089, 1089, 1080, 92, 74, 122, 44, 243, 147, 147, 1089, 117, 51, 81, 51, 123, 29, 86, 48, 285, 126, 126, 1055, 28, 55, 184, 51, 55, 391, 22, 107, 183, 366, 26, 102, 36, 113, 354, 25, 99, 36, 104, 494, 26, 87, 70, 35, 77, 39, 35, 451, 25, 59, 36, 87, 28, 104, 235, 25, 137, 865, 25, 68, 120, 87, 107, 56, 35, 46, 191, 620, 36, 79, 84, 67, 163, 137, 864, 25, 218, 65, 28, 75, 36, 114, 74, 36, 46, 5, 5, 5, 5, 5, 5, 5, 5, 150, 150, 150, 150, 5, 5, 5, 5, 1099, 1099, 1099, 1099, 5, 5, 5, 5], 'height': [2200, 27, 27, 27, 26, 26, 27, 27, 27, 26, 26, 26, 26, 33, 33, 33, 26, 33, 27, 27, 27, 27, 27, 26, 26, 26, 27, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 1330, 1330, 27, 27, 26, 27, 44, 27, 27, 27, 27, 27, 27, 27, 27, 26, 27, 27, 44, 27, 35, 35, 43, 27, 27, 43, 34, 27, 35, 26, 34, 35, 28, 26, 28, 28, 28, 28, 26, 27, 28, 28, 28, 26, 27, 27, 28, 28, 27, 26, 28, 26, 28, 28, 27, 27, 27, 35, 26, 35, 28, 27, 28, 28, 28, 28, 26, 28, 28, 28, 35, 28, 28, 35, 27, 35, 28, 35, 26, 27, 26, 26, 26, 28, 28, 28, 28, 28, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 28, 28, 28, 28, 1052, 1052, 1052, 1052, 6, 6, 6, 6, 1052, 1052, 1052, 1052], 'conf': [-1, -1, -1, -1, 96, 95, 95, 95, 95, 94, 94, 95, 94, -1, -1, -1, 89, 90, 96, 91, -1, -1, -1, 95, 95, 95, 95, -1, -1, -1, 95, -1, -1, -1, 95, -1, -1, -1, 95, -1, -1, -1, 95, -1, -1, -1, 95, -1, -1, -1, 95, -1, -1, -1, 95, -1, -1, -1, 95, -1, -1, -1, 95, -1, -1, -1, 96, 96, 96, 51, 95, -1, 96, -1, 95, 93, 92, 96, 90, 90, 95, 0, 0, -1, 96, -1, 89, 96, 96, 94, 94, -1, 94, 96, 96, -1, 96, 96, 96, 96, -1, 93, 96, 95, 95, -1, 87, 96, 97, 96, 96, 96, 96, -1, 93, 96, 96, 93, 93, 96, -1, 96, 96, -1, 85, 96, 96, 96, 96, 96, 97, 96, 96, -1, 96, 96, 96, 96, 96, 96, -1, 94, 90, 81, 94, 94, 93, 92, 96, 96, 96, -1, -1, -1, 95, -1, -1, -1, 95, -1, -1, -1, 96, -1, -1, -1, 95, -1, -1, -1, 95, -1, -1, -1, 95], 'text': ['', '', '', '', 'IN', 'THE', 'HIGH', 'COURT', 'OF', 'DELHI', 'AT', 'NEW', 'DELHI', '', '', '', 'W.P.', '(C)', 'NO.', '/2023', '', '', '', 'IN', 'THE', 'MATTER', 'OF:', '', '', '', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', ' ', '', '', '', 'SHRI', 'PAL', 'SINGH', '..-', 'PETITIONER', '', 'VERSUS', '', 'GOVT.', 'OF', 'NCT', 'OF', 'DELHI', '&', 'ORS.', '..-', 'RESPONDENTS', '', 'INDEX', '', 'S.', 'No.', 'Particulars', 'Pg.', 'No.', '', '1.', 'Urgent', 'Application', '', '2.', 'Notice', 'of', 'Motion', '', '3.', 'Memo', 'of', 'Parties', '', '4.', 'Court', 'Fees', 'of', 'Total', 'Rs', '60', '', '5.', 'List', 'of', 'Dates', '&', 'Events', '', '6.', 'Synopsis', '', '7.', 'Writ', 'Petition', 'under', 'Article', '226', 'of', 'the', 'Constitution', '', 'of', 'India', 'along', 'with', 'supporting', 'affidavit.', '', '8.', 'ANNEXURE', 'P-1:', 'A', 'copy', 'of', 'Aadhar', 'Card', 'of', 'the', '', '', '', ' ', '', '', '', ' ', '', '', '', 'Petitioner', '', '', '', ' ', '', '', '', ' ', '', '', '', '']}

filter_data = {"top": data['top'],"text": data['text']}

titles = ['Urgent Application', 'Notice of Motion', 'Memo of Parties', 'List of Dates & Events', 'Synopsis', 'Writ Petition under Article 226 of the Constitution of India along with supporting affidavit.', 'ANNEXURE P-1: A copy of Aadhar Card of the Petitioner', 'Application under Section 151 CPC seeking exemption from filing certified, true typed, and translated copies of the dim and annexures along with affidavit in support', 'Vakalatnama', 'Proof of Service']

# data = GeminiAPI.extract_top_value_of_particulars(filter_data,title)
# cleaned = ast.literal_eval(data.strip("`json\n").strip("`"))
# topMap = {}
# for key in cleaned:
#         value = cleaned[key]
#         topMap[value] = key
# print(topMap)

def extractTopValueFromOCRData(filter_data, titles):
    topMap = {}

    data_text = filter_data['text']
    data_top = filter_data['top']

    stop_words = {"is", "of", "the", "and", "a", "an", "in", "on", "at", "to", "for", "by", "with", "as", "from"}

    for title in titles:
        words = title.split(" ")
        topvalue = 0
        n = 0

        for word in words:
            if len(word) > 3 and word.lower() not in stop_words and word in data_text:
                idx = data_text.index(word)
                if idx != -1:
                    topvalue += data_top[idx]
                    n += 1

        valid_words = [w for w in words if len(w) > 3 and w.lower() not in stop_words]
        if n > 0 and len(valid_words) > 0 and n / len(valid_words) > 0.8:
            topMap[title] = topvalue / n

    return topMap

print(extractTopValueFromOCRData(filter_data,titles))
